apply from: file("${rootDir}/gradle/project.gradle")

subprojects {
    group = 'rg.example'
    version = '1.0-SNAPSHOT'

    repositories {
        maven {
            url 'https://neowu.github.io/maven-repo/'
            content {
                includeGroup 'core.framework'
            }
        }
    }

    sourceSets {
        dev {
            java {
                srcDir 'src/dev/java'
            }
            compileClasspath += sourceSets.main.runtimeClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
        }
    }
}

def coreNGVersion = '7.4.10'
def mysqlVersion = '8.0.20'
def hsqlVersion = '2.5.0'

configure(subprojects.findAll { it.name.endsWith('-db-migration') }) {
    apply from: file("${rootDir}/gradle/db-migration.gradle")

    dependencies {
        runtimeOnly "mysql:mysql-connector-java:${mysqlVersion}"
    }
}

configure(subprojects.findAll { it.name.endsWith('-mongo-migration') }) {
    apply from: file("${rootDir}/gradle/app.gradle")
    dependencies {
        implementation "core.framework:core-ng:${coreNGVersion}"
        implementation "core.framework:core-ng-mongo:${coreNGVersion}"
    }
    tasks.register('mongoMigrate') {
        dependsOn run
    }
}

configure(subprojects.findAll { it.name.matches('.*-interface') }) {
    dependencies {
        implementation "core.framework:core-ng-api:${coreNGVersion}"
    }
}

configure([project(':demo-service'),
           project(':back-office'),
           project(':demo-site'),
           project(':customer-service'),
           project(':product-service'),
           project(':scheduler'),
           project(':website')]) {
    apply from: file("${rootDir}/gradle/app.gradle")
    dependencies {
        implementation "core.framework:core-ng:${coreNGVersion}"
        testImplementation "core.framework:core-ng-test:${coreNGVersion}"
    }
}


//service use mysql
configure([project(':demo-service'),
           project(':customer-service')]) {
    dependencies {
        runtimeOnly "mysql:mysql-connector-java:${mysqlVersion}"
        testRuntimeOnly "org.hsqldb:hsqldb:${hsqlVersion}"
    }
}

//service use mongo
configure([project(':demo-service'),
           project(':product-service')]) {
    dependencies {
        implementation "core.framework:core-ng-mongo:${coreNGVersion}"
//        testImplementation "core.framework:core-ng-mongo-test:${coreNGVersion}"
    }
}

project(':customer-service') {
    dependencies {
        implementation project(':customer-service-interface')
    }
}

project(':product-service') {
    dependencies {
        implementation project(':product-service-interface')
    }
}

project(':demo-service') {
    dependencies {
        implementation project(':demo-service-interface')
    }
}

project(':website') {
    dependencies {
        implementation project(':website-interface')
        implementation project(':customer-service-interface')
    }
}

project(':back-office') {
    dependencies {
        implementation project(':back-office-interface')
        implementation project(':customer-service-interface')
    }
}